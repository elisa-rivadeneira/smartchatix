from sentence_transformers import SentenceTransformer
import numpy as np

# Cargar modelo de embeddings
model = SentenceTransformer("all-MiniLM-L6-v2")

# 游댳 Diccionario de intenciones con descripciones m치s naturales
intenciones_descripciones = {
    "listar_clientes": "Mostrar la lista de clientes registrados.",
    "buscar_cliente": "Buscar informaci칩n detallada de un cliente espec칤fico.",
    "ventas_totales": "Consultar el total de ventas realizadas en un per칤odo determinado.",
    "ventas_por_producto": "Consultar la cantidad de productos vendidos de un tipo espec칤fico.",
    "ventas_por_fecha": "Obtener las ventas en un per칤odo de tiempo.",
    "ventas_por_cliente": "Consultar las ventas hechas a un cliente en particular.",
    "ventas_mayor": "Saber cu치l fue la venta m치s grande registrada.",
    "ventas_promedio": "Calcular el promedio de ventas en un per칤odo.",
    "grafico_ventas": "Generar un gr치fico visual de ventas.",
    "grafico_compras": "Generar un gr치fico visual de compras.",
    "compras_totales": "Consultar el total de compras realizadas.",
    "compras_por_producto": "Consultar la cantidad de productos comprados de un tipo espec칤fico.",
    "compras_por_fecha": "Obtener las compras en un per칤odo de tiempo.",
}

# Convertir descripciones de intenciones a embeddings
intencion_embeddings = {key: model.encode(desc) for key, desc in intenciones_descripciones.items()}

def detectar_intencion_nlp(pregunta):
    """Detecta la intenci칩n de la pregunta bas치ndose en embeddings."""
    pregunta_embedding = model.encode(pregunta)

    # Comparar con todas las intenciones usando similitud de coseno
    similitudes = {intencion: np.dot(pregunta_embedding, emb) for intencion, emb in intencion_embeddings.items()}

    # Obtener la intenci칩n con la mayor similitud
    mejor_intencion = max(similitudes, key=similitudes.get)

    return mejor_intencion
